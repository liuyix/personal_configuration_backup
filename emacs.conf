;; Liuyix .emacs 
;; 依赖：ctags,cscope
;; 需要字体： Monaco
;; 需要刷新repo
;; M-x package-refresh-contents
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(compile-command "make")
 '(display-time-mode t)
 '(ecb-layout-name "left11")
 '(ecb-layout-window-sizes (quote (("left11" (ecb-methods-buffer-name 0.18719211822660098 . 0.7241379310344828) (ecb-history-buffer-name 0.18719211822660098 . 0.25862068965517243)) ("left9" (ecb-methods-buffer-name 0.2413793103448276 . 0.9827586206896551)) ("leftright-analyse" (ecb-directories-buffer-name 0.18143459915611815 . 0.37735849056603776) (ecb-sources-buffer-name 0.18143459915611815 . 0.3018867924528302) (ecb-history-buffer-name 0.18143459915611815 . 0.3018867924528302) (ecb-methods-buffer-name 0.3333333333333333 . 0.49056603773584906) (ecb-analyse-buffer-name 0.3333333333333333 . 0.49056603773584906)))))
 '(ecb-options-version "2.40")
 '(fringe-mode (quote (0)) nil (fringe))
 '(indicate-buffer-boundaries (quote left))
 '(linum-mode 1 t)
 '(nil nil t)
 '(org-support-shift-select t)
 '(safe-local-variable-values (quote ((encoding . utf-8))))
 '(scroll-bar-mode (quote right))
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(yas/trigger-key "C-M-/"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;============================================================================;;
;;http://modioyo.appspot.com/2011/11/24/emacs-24-font.html
;;https://hisea.me/p/mac-emacs-chinese-font-setting

;;(set-frame-font "Menlo-15")
;;(set-fontset-font
;;    (frame-parameter nil 'font)
;;    'han
;;    (font-spec :family "Hiragino Sans GB" ))

(set-frame-font "Monaco:pixelsize=18")
(dolist (charset '(han kana symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
                    charset
                    (font-spec :family "Hiragino Sans GB" :size 18)
))
;;===========================================================================;;


;;;;;;;;;;;;cedet settings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load CEDET
(load-file "~/.emacs.d/cedet-1.1/common/cedet.el")
;;(load-file "/usr/share/emacs/site-lisp/cedet/common/cedet.el")
(require 'cedet)
;; (semantic-load-enable-minimum-features)
(semantic-load-enable-code-helpers)
;;(semantic-load-enable-guady-code-helpers)
;;(semantic-load-enable-excessive-code-helpers)
;;(semantic-load-enable-semantic-debugging-helpers)
;;(require 'semantic-ia)
(require 'semantic-gcc)
;;(semantic-add-system-include "~/Dev/eclipse_workspace/gem5/build/X86/params" 'c++-mode)
;;(semantic-add-system-include "~/Dev/eclipse_workspace/gem5/build/X86/configs" 'c++-mode)
;;turn on cscope semanticdb backend
(require 'semanticdb-cscope)
(semanticdb-enable-cscope-databases)

;;(when (cedet-ectag-version-check)
;;  (semantic-load-enable-primary-exuberent-ctags-support))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;ede setting
(global-ede-mode t)

;;ecb load
;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/ecb")
(add-to-list 'load-path 
		"~/.emacs.d/ecb-2.40.1")
(require 'ecb-autoloads)

;;默认el格式插件存放的目录
(add-to-list 'load-path
             "~/.emacs.d/plugins")
;;cc-mode path
(add-to-list 'load-path
			 "~/.emacs.d/plugins/cc-mode")

;;===============================================
;; org mode
;;================
(setq load-path (cons "~/.emacs.d/plugins/org-7.9.2/lisp" load-path))
     (setq load-path (cons "~/.emacs.d/plugins/org-7.9.2/lisp" load-path))
(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(add-hook 'org-mode-hook 
	(lambda () (setq truncate-lines nil)))

;;===============================================
;color theme
;;================================================
;;color_theme path
(add-to-list 'load-path
			 "~/.emacs.d/plugins/color_theme")
(require 'color-theme)
(color-theme-initialize)
(color-theme-kingsajz)

;;================================================
;;yasnippet的配置
;;================================================
(require 'xml-rpc)

;;yasnippet path
(add-to-list 'load-path
	     "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas/initialize)
(setq yas/snippet-dirs "~/.emacs.d/plugins/yasnippet/snippets")
(setq yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")
;;yasnippet dropdown-list
(require 'dropdown-list)
(setq yas/prompt-functions '(yas/dropdown-prompt
                             yas/ido-prompt
                             yas/completing-prompt))

;;================================================
;;python-mode的配置
;;================================================
;;(autoload 'python-mode "python-mode" "Python Mode." t)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))
;; (add-hook 'python-mode-hook
;;            (lambda ()
;;              (set (make-variable-buffer-local 'beginning-of-defun-function)
;;                   'py-beginning-of-def-or-class)
;;              (setq outline-regexp "def\\|class ")))
;;================================================
;; (require 'auto-complete)
;; (require 'auto-complete-config)
;; (global-auto-complete-mode t)
;; (setq-default ac-sources '(ac-source-words-in-same-mode-buffers))
;; (add-hook 'emacs-lisp-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-symbols)))
;; (add-hook 'auto-complete-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-filename)))
;; (set-face-background 'ac-candidate-face "lightgray")
;; (set-face-underline 'ac-candidate-face "darkgray")
;; (set-face-background 'ac-selection-face "steelblue") ;;; 设置比上面截图中更好看的背景颜色
;; (define-key ac-completing-map "\M-n" 'ac-next)  ;;; 列表中通过按M-n来向下移动
;; (define-key ac-completing-map "\M-p" 'ac-previous)
;; (setq ac-auto-start 2)
;; (setq ac-dwim t)
;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)


;; ;;http://www.rwdev.eu/articles/emacspyeng
;; (require 'pycomplete)
;; ;; python-mode settings
;; (setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
;; (setq interpreter-mode-alist(cons '("python" . python-mode)
;;                              interpreter-mode-alist))
;; ;; path to the python interpreter, e.g.: ~rw/python27/bin/python2.7
;; (setq py-python-command "python")
;; (autoload 'python-mode "python-mode" "Python editing mode." t)

;; ;;http://www.rwdev.eu/articles/emacspyeng
;; ;; pymacs settings
;; (setq pymacs-python-command py-python-command)
;; (autoload 'pymacs-load "pymacs" nil t)
;; (autoload 'pymacs-eval "pymacs" nil t)
;; (autoload 'pymacs-apply "pymacs")
;; (autoload 'pymacs-call "pymacs")

;;================================================
;; markdown mode
;;================================================
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
;;================================================




;;===============================================
;; org mode
;;===============================================
(setq load-path (cons "~/.emacs.d/plugins/org-7.9.2/lisp" load-path))
     (setq load-path (cons "~/.emacs.d/plugins/org-7.9.2/lisp" load-path))
(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(add-hook 'org-mode-hook 
	(lambda () (setq truncate-lines nil)))
;;===============================================

;;===============================================
;;org2blog
;;===============================================
;; (setq load-path (cons "~/.emacs.d/org2blog/" load-path))
;; (require 'org2blog-autoloads)
;; (setq org2blog/wp-blog-alist
;;       '(("wordpress"
;;          :url "http://username.wordpress.com/xmlrpc.php"
;;          :username "username"
;;          :default-title "Hello World"
;;          :default-categories ("org2blog" "emacs")
;;          :tags-as-categories nil)
;;         ("liuyix"
;;          :url "http://liuyix.org/wordpress/xmlrpc.php"
;;          :username "cnliuyix"
;; ;;	 :wp-code t
;; 	 )))
;;================================================


;;================================================
;;key bindings
;;================================================
(global-set-key [f11] 'my-fullscreen)
;;full screen function
(defun my-fullscreen ()
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32
   '(2 "_NET_WM_STATE_FULLSCREEN" 0))
)

;;function screen maximized
(defun my-maximized ()
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32
   '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32
   '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
)
;;init maximized 
;;(my-maximized)

;;================================================

;;================================================
;;set tab width
(setq default-tab-width 2)
(setq tab-width 2)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
;;set http proxy
(setq url-using-proxy t)
(setq url-proxy-services '(("http" . "127.0.0.1:8087")))
;;(setq tramp-default-method "ssh")
;;================================================

;;================================================
;;enable recent open file log
;; recentf stuff
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
;;================================================


;;================================================
;;使speedbar位于同一个frame里面，同时使用Win-s快捷键调出speedbar
;;http://emacswiki.org/emacs/download/sr-speedbar.el
;;更多内容参考源码，里面有详细的注释
(require 'sr-speedbar)
(global-set-key (kbd "s-s") 'sr-speedbar-toggle)
;;================================================


;;================================================
;;ede project!!
;;(ede-cpp-root-project "gem5_ede" :file "/home/liuyix/Dev/eclipse_workspace/gem5/README"
;;					  :include-path '("./src/base" "./build/X86/config" "./build/X86/debug" "./build/X86/enums" "./build/X86/params")
;;					  :system-include-path '("/home/liuyix/Dev/eclipse_workspace/gem5/ext/libelf" "/home/liuyix/Dev/eclipse_workspace/gem5/ext/gzstream" "/usr/include" "/usr/include/c++/4.7.1")
;;					  :spp-table '()
;;)
;;================================================


;;================================================
(c-add-style "m5"
	     '((c-basic-offset . 4)
               (indent-tabs-mode . nil)
	       (c-offsets-alist . ((substatement-open . 0)
				   (inline-open . 0)
				   (block-open . -4)
				   (case-label . 2)
				   (label . 2)
				   (statement-case-intro . 2)
				   (statement-case-open . 2)
				   (access-label . -2)
				   (innamespace . 0)))))
;;cc-mode 配置
(defun my-c-mode-common-hook ()
	;;set style
	(c-set-style "m5")
	(setq tab-width 4 indent-tabs-mode nil)
;;	(c-toggle-auto-newline 1)
	(c-toggle-auto-hungry-state 1)
	(define-key c-mode-base-map [(f8)] 'compile)
	(define-key c-mode-base-map [(return)] 'newline-and-indent)
	(define-key c-mode-base-map (kbd "C-\\") 'hs-toggle-hiding)
    (define-key c-mode-base-map (kbd "<f9>") 'hs-hide-all)
    (define-key c-mode-base-map (kbd "<C-f9>") 'hs-show-all)
    (define-key c-mode-base-map (kbd "<C-tab>") 'hs-toggle-hiding)
    (require 'xcscope)
)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
;;代码折叠
(add-hook 'c-mode-common-hook 'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
;;================================================

;;================================================
;;cscope settings
;;(require 'xcscope)
;;c,c++文件时再加载
;;(add-hook 'c-mode-common-hook
;;		'(lambda()
;;			(require 'xcscope)))
;;(setq-default fill-column 66)

;;================================================
;;auto repair mode
(require 'autopair)
(autopair-global-mode) ;; enable autopair in all buffers
;;================================================

;;================================================
;; 括号显示
(show-paren-mode 1)
;;================================================

;;================================================
;;undo-tree
(require 'undo-tree)
(global-undo-tree-mode)
;;================================================

;;================================================
;; orgmode publish project
;;================================================
;; link:http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

(require 'org-publish)
(setq org-publish-project-alist
      '(

        ;; ... add all the components here (see below)...
        ("org-notes"
         :base-directory "~/org/"
         :base-extension "org"
         :publishing-directory "~/org_publish_html/"
         :recursive t
         :publishing-function org-publish-org-to-html
         :headline-levels 4             ; Just the default for this project.
         :style "<link rel=\"stylesheet\" href=\"../css/worg.css\" type=\"text/css\"/>"
         :style-include-default nil
         :style-include-scripts nil
         :author "liuyix"
         :email-info t
         :author-info t
         :auto-preamble t
         :auto-index t
         :index-filename "index.org"
         :index-title "Index"
         :makeindex t
         :auto-sitemap t                ;; Generate sitemap.org automagically...
         :sitemap-filename "sitemap.org"  ;; ... call it sitemap.org (it's the default)...
         :sitemap-title "Sitemap"         ;; ... with title 'Sitemap'.
         )
        ("org-static"
         :base-directory "~/org/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/org_publish_html/"
         :recursive t
         :publishing-function org-publish-attachment
         )

        ("org" :components ("org-notes" "org-static"))


        )
)







;;================================================
;;http://stackoverflow.com/a/151946
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 2
  kept-old-versions 1
  version-control t)
;;(setq make-backup-files nil)

;;set default user name and email
(setq user-mail-address "hi@liuyix.org")
(setq user-full-name "liuyix")

;;frame title
;; (setq frame-title-format
;;           '("%f" (dired-directory, dired-directory "%b")))
;;
(setq org-export-date-timestamp-format "%Y-%m-%d")

;;==========================================================
;; orgmode export to latex
(require 'org-latex)
(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))
;;==========================================================================
;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
;;http://emacs-fu.blogspot.com/2011/04/nice-looking-pdfs-with-org-mode-and.html
(add-to-list 'org-export-latex-classes
  '("djcb-org-article"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{graphicx} 
\\defaultfontfeatures{Mapping=tex-text}
\\setromanfont{WenQuanYi Zen Hei Mono}
\\setromanfont [BoldFont={WenQuanYi Zen Hei Mono},
                ItalicFont={WenQuanYi Zen Hei Mono}]{WenQuanYi Zen Hei Mono}
\\setsansfont{WenQuanYi Zen Hei Mono}
\\setmonofont[Scale=0.8]{WenQuanYi Zen Hei Mono}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-to-pdf-process 
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes




;;====================;;
;;ecb Symbol's value as variable is void: stack-trace-on-error
;;http://blog.csdn.net/cnsword/article/details/7474119
(setq stack-trace-on-error t)

;;;http://www.emacswiki.org/emacs/ListBuffers
(global-set-key (kbd "\C-x\C-b") 'buffer-menu-other-window)

;;ecb key bindings
(global-set-key [f6] 'ecb-activate)
(global-set-key [f7] 'ecb-toggle-ecb-windows)
(global-set-key [S-f6] 'ecb-deactivate)


;; jump back
(global-set-key (kbd "s-b") 'pop-global-mark)

;;compile
(global-set-key [f8] 'compile)

;;pin bar
;;http://www.emacswiki.org/emacs/PinBar
(require 'pinbar)
(global-set-key "\M-0" 'pinbar-add)
(pinbar-mode t)

;;http://www.emacswiki.org/emacs/IswitchBuffers
(setq iswitchb-buffer-ignore '("^ " "*Buffer"))
(setq iswitchb-buffer-ignore '("^\\*"))
(iswitchb-mode 1)
(defun iswitchb-local-keys ()
  (mapc (lambda (K) 
	      (let* ((key (car K)) (fun (cdr K)))
            (define-key iswitchb-mode-map (edmacro-parse-keys key) fun)))
	    '(("<right>" . iswitchb-next-match)
	      ("<left>"  . iswitchb-prev-match)
	      ("<up>"    . ignore             )
	      ("<down>"  . ignore             ))))

(add-hook 'iswitchb-define-mode-map-hook 'iswitchb-local-keys)
;; emacs for python
(load-file "~/.emacs.d/emacs-for-python/epy-init.el")

;;pymacs
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
;; (eval-after-load "pymacs"
;; '(add-to-list 'pymacs-load-path YOUR-PYMACS-DIRECTORY"))

;;auto complete
(add-to-list 'load-path "~/.emacs.d/plugins/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins//ac-dict")
(ac-config-default)


;; line number
(global-linum-mode 1)
(setq linum-format "%4d ")
(setq linum-disabled-modes-list '(eshell-mode wl-summary-mode compilation-mode)) 
(defun linum-on () 
  (unless (or (minibufferp) (member major-mode linum-disabled-modes-list)) (linum-mode 1)))

;;设置ecb的快捷键
(global-set-key (kbd "C-," ) 'ecb-goto-window-methods)
(global-set-key (kbd "C-." ) 'ecb-goto-window-edit-last)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; http://marmalade-repo.org/

(require 'package)
(add-to-list 'package-archives 
    '("marmalade" .
      "http://marmalade-repo.org/packages/"))
(package-initialize)

;; magit
;; (require 'magit)
;; 使用marmalade package repo
;; https://github.com/magit/magit/blob/master/INSTALL.md
(global-set-key [f9] 'magit-status)

;;python-mode.el-6.1.1
(setq py-install-directory "~/.emacs.d/python-mode.el-6.1.1")
(add-to-list 'load-path py-install-directory)
(require 'python-mode)

(add-to-list 'load-path "~/.emacs.d/tramp-2.2.7/lisp/")
;; for Emacs
(add-to-list 'Info-default-directory-list "~/.emacs.d/tramp-2.2.7/info/")
;; for XEmacs
(add-to-list 'Info-directory-list "~/.emacs.d/tramp-2.2.7/info/")
(require 'tramp)

(require 'point-undo)
(global-set-key (kbd "C-<" ) 'point-undo)
(global-set-key (kbd "C->" ) 'point-redo)

;;禁止图形的tool bar
(tool-bar-mode -1)